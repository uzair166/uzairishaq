{"version":3,"sources":["components/terminal.js","App.js","serviceWorker.js","index.js"],"names":["Terminal","props","styles","wrapper","height","minHeight","boxShadow","borderRadius","head","fontfamily","color","margin","padding","fontSize","textAlign","bar","verticalAlign","width","backgroundColor","fontFamily","paddingTop","float","red","display","marginLeft","yellow","green","screen","textOverflow","overflow","terminalfont","style","className","App","Container","Navbar","expand","bg","Brand","Toggle","aria-controls","Collapse","id","Nav","Link","href","Row","md","Jumbotron","Col","Card","Img","variant","src","Body","Title","Text","ListGroup","Item","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ffadefff.chunk.js","sourcesContent":["import React from 'react'\n\nconst Terminal = props => {\n\n    const styles = {\n        wrapper: {\n            height: '50%',\n            minHeight: '300px',\n            boxShadow: '0px 0px 20px rgba(0,0,0,0.75)',\n            borderRadius: '5px'\n        },\n        head: {\n            fontfamily: \"'monospace'\",\n            color: \"'#fff'\",\n            margin: \"auto\",\n            padding: \"35px\",\n            fontSize: \"40px\",\n            textAlign: \"center\",\n        },\n        bar: {\n            verticalAlign: \"middle\",\n            // textAlign: \"center\",\n            width: \"100%\",\n            height: \"23px\",\n            backgroundColor: \"#DAD9D9\",\n            margin: \"0 auto\",\n            fontFamily: \"monospace\",\n            paddingTop: \"5px\",\n            float: \"none\",\n            borderRadius: \"5px 5px 0 0\",\n        },\n        red: {\n            display: 'inline-block',\n            backgroundColor: \"#E94B35\",\n            borderRadius: \"100%\",\n            width: \"13px\",\n            height: \"13px\",\n            margin: \"0 4px\",\n            marginLeft: \"6px\"\n        },\n        yellow: {\n            display: 'inline-block',\n            backgroundColor: \"#f0f000\",\n            borderRadius: \"100%\",\n            width: \"13px\",\n            height: \"13px\",\n            margin: \"0 4px\"\n        },\n        green: {\n            backgroundColor: \"#1AAF5C\",\n            borderRadius: \"100%\",\n            width: \"13px\",\n            height: \"13px\",\n            display: \"inline-block\",\n            margin: \"0 4px\"\n        },\n        screen: {\n            backgroundColor: \"rgba(0, 0, 0, 0.8)\",\n            width: \"100%\",\n            height: \"calc(100% - 23px)\",\n            borderRadius: \"0 0 5px 5px\",\n            margin: \"0 auto\",\n            padding: \"8px\",\n            textOverflow: 'clip',\n            // textWrap: 'none',\n            // textOverflow: 'ellipsis',\n            overflow: 'hidden',\n\n            // wordWrap: 'break-word'\n        },\n        terminalfont: {\n            // color: \"#fff\",\n            color: 'rgb(0, 255, 0)',\n            fontFamily: \"monospace\",\n            // fontSize: \"15px\",\n            textAlign: \"left\",\n            // position: \"static\",\n            textOverflow: 'clip'\n        }\n    }\n    return(\n        <div style={styles.wrapper}>\n            <div style={styles.bar}>\n                <div style={styles.red}></div>\n                <div style={styles.yellow}></div>\n                <div style={styles.green}></div>\n            </div>\n            <div style={styles.screen}>\n                <pre style={styles.terminalfont} className=\"terminalfont\" ><strong>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;__         <br />\n&nbsp;__  __  ____      __   /\\_\\  _ __  <br />\n/\\ \\/\\ \\/\\_ ,`\\  /'__`\\ \\/\\ \\/\\`'__\\<br />\n\\ \\ \\_\\ \\/_/  /_/\\ \\L\\.\\_\\ \\ \\ \\ \\/ <br />\n&nbsp;\\ \\____/ /\\____\\ \\__/.\\_\\\\ \\_\\ \\_\\ <br />\n&nbsp;&nbsp;\\/___/  \\/____/\\/__/\\/_/ \\/_/\\/_/ <br />\n                                    \n                </strong></pre>\n            </div>\n        </div>\n    )\n}\n\nexport default Terminal","import React from \"react\";\nimport { Container, Navbar, Nav, Row, Col, Jumbotron, Card, Button, ListGroup } from \"react-bootstrap\";\nimport \"./App.css\";\nimport Terminal from \"./components/terminal\";\n\nfunction App() {\n    return (\n      <div className=\"bg\">\n        <Container>\n            <Navbar expand=\"md\" className=\"mb-4\" bg=\"transparent\">\n                <Navbar.Brand>Uzair Ishaq</Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" className=\"border-0\"/>\n                <Navbar.Collapse id=\"basic-navbar-nav\" className=\"justify-content-end\">\n                    <Nav >\n                        <Nav.Link href=\"#home\">Projects</Nav.Link>\n                        <Nav.Link href=\"#link\">Contacts Me</Nav.Link>\n                    </Nav>\n                </Navbar.Collapse>\n            </Navbar>\n            <Row md={12} className=\"justify-content-center\">\n                <Jumbotron><h3>terminal whooo</h3></Jumbotron>\n            </Row>\n            <Row>\n            <Col md={8} className=\"mb-5\">\n                <Terminal />\n            </Col>\n            <Col md={4} className=\"border-left\">\n                <Card>\n                    <Card.Img variant=\"top\" src=\"sp.jpeg\" />\n                    <Card.Body>\n                    <Card.Title>Card Title</Card.Title>\n                    \n                    \n                    <Card.Text>\n                        Some quick example text to build on the card title and make up the bulk of\n                        the card's content.\n                    </Card.Text>\n                    {/* <Button variant=\"primary\">Go somewhere</Button> */}\n                    </Card.Body>\n                    <ListGroup className=\"list-group-flush\">\n                        <ListGroup.Item>Cras justo odio</ListGroup.Item>\n                        <ListGroup.Item>Dapibus ac facilisis in</ListGroup.Item>\n                        <ListGroup.Item>Vestibulum at eros</ListGroup.Item>\n                    </ListGroup>\n                </Card>\n            </Col>\n            </Row>\n          <p>yo</p>\n        </Container>\n      </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}