{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","className","Container","Navbar","expand","bg","Brand","Toggle","aria-controls","Collapse","id","Nav","Link","href","Jumbotron","Row","Col","md","lg","Card","Img","variant","src","Body","Title","Text","ListGroup","Item","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iTA2KeA,MA1Jf,WACI,OACI,yBAAKC,UAAU,OACX,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAQC,OAAO,KAAKH,UAAU,OAAOI,GAAG,eACpC,kBAACF,EAAA,EAAOG,MAAR,CAAcL,UAAU,WAAxB,eACA,kBAACE,EAAA,EAAOI,OAAR,CACIC,gBAAc,mBACdP,UAAU,kBAEd,kBAACE,EAAA,EAAOM,SAAR,CACIC,GAAG,mBACHT,UAAU,uBAEV,kBAACU,EAAA,EAAD,KACI,kBAACA,EAAA,EAAIC,KAAL,CAAUC,KAAK,QAAQZ,UAAU,YAAjC,YAGA,kBAACU,EAAA,EAAIC,KAAL,CAAUC,KAAK,QAAQZ,UAAU,YAAjC,gBAIJ,kBAACU,EAAA,EAAD,KACI,kBAACA,EAAA,EAAIC,KAAL,CACIC,KAAK,QACLZ,UAAU,yBAEd,kBAACU,EAAA,EAAIC,KAAL,CACIC,KAAK,QACLZ,UAAU,uBAEd,kBAACU,EAAA,EAAIC,KAAL,CACIC,KAAK,QACLZ,UAAU,6BAU1B,kBAACa,EAAA,EAAD,CAAWb,UAAU,4BACjB,wBAAIA,UAAU,UAAd,+CAGA,0DAIJ,kBAACc,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,GACZ,kBAACC,EAAA,EAAD,CAAMlB,UAAU,cACZ,yBAAKA,UAAU,UACf,yBAAKA,UAAU,aACX,kBAACkB,EAAA,EAAKC,IAAN,CACIC,QAAQ,MACRC,IAAI,UACJrB,UAAU,2BAIlB,kBAACkB,EAAA,EAAKI,KAAN,KACI,kBAACJ,EAAA,EAAKK,MAAN,CAAYvB,UAAU,eAElB,0BAAMA,UAAU,QAAhB,gBAGJ,kBAACkB,EAAA,EAAKM,KAAN,0EAMJ,kBAACC,EAAA,EAAD,CAAWzB,UAAU,oBACjB,kBAACyB,EAAA,EAAUC,KAAX,wBACA,kBAACD,EAAA,EAAUC,KAAX,gCAGA,kBAACD,EAAA,EAAUC,KAAX,+BAOhB,oCC5FIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.836958f6.chunk.js","sourcesContent":["import React from 'react';\nimport {\n    Container,\n    Navbar,\n    Nav,\n    Row,\n    Col,\n    Jumbotron,\n    Card,\n    Button,\n    ListGroup,\n    Image,\n} from 'react-bootstrap';\nimport './App.css';\nimport Terminal from './components/terminal';\nimport ArcadeScreen from './components/arcadeScreen';\n\nfunction App() {\n    return (\n        <div className=\"bg1\">\n            <Container>\n                <Navbar expand=\"md\" className=\"mb-4\" bg=\"transparent\">\n                    <Navbar.Brand className=\"h1 grad\">Uzair Ishaq</Navbar.Brand>\n                    <Navbar.Toggle\n                        aria-controls=\"basic-navbar-nav\"\n                        className=\"border-0 grad\"\n                    />\n                    <Navbar.Collapse\n                        id=\"basic-navbar-nav\"\n                        className=\"justify-content-end\"\n                    >\n                        <Nav>\n                            <Nav.Link href=\"#home\" className=\"gradLink\">\n                                Projects\n                            </Nav.Link>\n                            <Nav.Link href=\"#link\" className=\"gradLink\">\n                                Contacts Me\n                            </Nav.Link>\n                        </Nav>\n                        <Nav>\n                            <Nav.Link\n                                href=\"#link\"\n                                className=\"fa fa-linkedin sicon\"\n                            ></Nav.Link>\n                            <Nav.Link\n                                href=\"#link\"\n                                className=\"fa fa-github sicon\"\n                            ></Nav.Link>\n                            <Nav.Link\n                                href=\"#link\"\n                                className=\"fa fa-instagram sicon\"\n                            ></Nav.Link>\n                        </Nav>\n                    </Navbar.Collapse>\n                </Navbar>\n                {/* <Row\n                    md={12}\n                    className=\"justify-content-center\"\n                    className=\"px-2 mb-4\"\n                > */}\n                <Jumbotron className=\"gradJumbo py-5 shadow-sm\">\n                    <h1 className=\"header\">\n                        Software Developer, Programmer, Engineer...\n                    </h1>\n                    <h5>I like to build things :)</h5>\n                </Jumbotron>\n                {/* <ArcadeScreen /> */}\n                {/* </Row> */}\n                <Row>\n                    <Col md={5} lg={4}>\n                        <Card className=\"gradBorder\">\n                            <div className=\"imgbg\"></div>\n                            <div className=\"mx-3 mt-3\">\n                                <Card.Img\n                                    variant=\"top\"\n                                    src=\"sp.jpeg\"\n                                    className=\"rounded-circle shadow\"\n                                />\n                            </div>\n\n                            <Card.Body>\n                                <Card.Title className=\"text-center\">\n                                    {/* <Image src=\"sp.jpeg\" roundedCircle /> */}\n                                    <span className=\"grad\">Uzair Ishaq</span>\n                                </Card.Title>\n\n                                <Card.Text>\n                                    Talk about who i am here and blah blah blah\n                                    blah blah blah maybe\n                                </Card.Text>\n                                {/* <Button variant=\"primary\">Go somewhere</Button> */}\n                            </Card.Body>\n                            <ListGroup className=\"list-group-flush\">\n                                <ListGroup.Item>Cras justo odio</ListGroup.Item>\n                                <ListGroup.Item>\n                                    Dapibus ac facilisis in\n                                </ListGroup.Item>\n                                <ListGroup.Item>\n                                    Vestibulum at eros\n                                </ListGroup.Item>\n                            </ListGroup>\n                        </Card>\n                    </Col>\n                </Row>\n                <p>yo</p>\n            </Container>\n        </div>\n    );\n\n    // return (\n    //     <div className=\"bg1\">\n    //         <Container bg=\"dark\">\n    //             <Navbar expand=\"md\" className=\"mb-4\" bg=\"transparent\">\n    //                 <Navbar.Brand>Uzair Ishaq</Navbar.Brand>\n    //                 <Navbar.Toggle\n    //                     aria-controls=\"basic-navbar-nav\"\n    //                     className=\"border-0\"\n    //                 />\n    //                 <Navbar.Collapse\n    //                     id=\"basic-navbar-nav\"\n    //                     className=\"justify-content-end\"\n    //                 >\n    //                     <Nav>\n    //                         <Nav.Link href=\"#home\">Projects</Nav.Link>\n    //                         <Nav.Link href=\"#link\">Contacts Me</Nav.Link>\n    //                     </Nav>\n    //                 </Navbar.Collapse>\n    //             </Navbar>\n    //             <Row\n    //                 md={12}\n    //                 className=\"justify-content-center\"\n    //                 className=\"px-2 mb-4\"\n    //             >\n    //                 {/* <Jumbotron><h3>terminal whooo</h3></Jumbotron> */}\n    //                 <ArcadeScreen />\n    //             </Row>\n    //             <Row>\n    //                 <Col md={8} className=\"mb-5\">\n    //                     <Terminal />\n    //                 </Col>\n    //                 <Col md={4}>\n    //                     <Card>\n    //                         <Card.Img variant=\"top\" src=\"sp.jpeg\" />\n    //                         <Card.Body>\n    //                             <Card.Title>Card Title</Card.Title>\n\n    //                             <Card.Text>\n    //                                 Some quick example text to build on the card\n    //                                 title and make up the bulk of the card's\n    //                                 content.\n    //                             </Card.Text>\n    //                             {/* <Button variant=\"primary\">Go somewhere</Button> */}\n    //                         </Card.Body>\n    //                         <ListGroup className=\"list-group-flush\">\n    //                             <ListGroup.Item>Cras justo odio</ListGroup.Item>\n    //                             <ListGroup.Item>\n    //                                 Dapibus ac facilisis in\n    //                             </ListGroup.Item>\n    //                             <ListGroup.Item>\n    //                                 Vestibulum at eros\n    //                             </ListGroup.Item>\n    //                         </ListGroup>\n    //                     </Card>\n    //                 </Col>\n    //             </Row>\n    //             <p>yo</p>\n    //         </Container>\n    //     </div>\n    // );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}